/** @addtogroup @STRUCT_NAME
* @{
*/
/**  @brief Serializes the supplied structure into a char buffer.
*
* @param[in]  target     The structure to pack into the char buffer.
* @param[out] buf        Contains the structure as char buffer.
* @param[out] buffer_len Contains the length of the buffer.
*/
int serialize_REPLACE_STRUCT_NAME( REPLACE_STRUCT_NAME *target, char **buf, uint32_t *buffer_len);

/** @brief Deserializes the supplied character buffer.
*
* @param[out] dest       A pointer to a struct to output the contents of the buffer to.
* @param[in]  buffer     The buffer to read into the destination struct.
* @param[in]  buffer_len The size of the buffer provided (for overflows).
*/
int deserialize_REPLACE_STRUCT_NAME( REPLACE_STRUCT_NAME **dest, const char *buffer, uint32_t buffer_len);

/** @brief Frees the supplied struct and its members.
*
* @param[in] target The struct to free.
*/
void free_REPLACE_STRUCT_NAME( REPLACE_STRUCT_NAME *target );

/** @brief Initializes the supplied struct to the default values.
*
*  @param[in,out] target The struct to initialize.
*/
void init_REPLACE_STRUCT_NAME( REPLACE_STRUCT_NAME *target );

/** @} */
