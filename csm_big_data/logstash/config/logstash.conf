input {

# syslog using SCALA DSV Content Pack
tcp {
	port => 10515
	type => "syslog"
} #end tcp
tcp {
        port => 10516
        type => "bmc_temp_sensor"
} 
tcp {
        port => 10517
        type => "ib_temp_sensor"
}
tcp {
        port => 10518
        type => "bmc_sel"
}
tcp {
        port => 10519
        type => "zimon"
}
tcp {
        port => 10520
        type => "gocons"
}
} #end inputs


filter {

if [type] == "syslog" 
{
	grok {
		match => { "message" => "%{RSYSLOGDSV}" }
        overwrite => ["message"]
		patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
	} #end grok
	
	#force through date filter to drop microseconds and give us this timestamp yyyy-MM-dd'T'HH:mm:ss.SSSX
	date {
		match => ["timestamp","ISO8601"]
		target => "@timestamp"
	} #end date

    if [program_name] == "kernel"
    {
        # Attempt to derive the actual program name from the kernel message.
        grok { 
            match => {"message" => "%{KERNELMSG}" }
            overwrite => ["program_name"]
            patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
            tag_on_failure => [ ]
            add_tag => ["kernel"]
        }
    }
    else if [program_name] == "mmfs" {
        grok {
		    patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
            overwrite => ["message", "severity"]
            match => [ "message", "%{MMFSMSG}" ]
            add_tag => ["mmfs"]
        } 
    } # end mmfs
    else if [program_name] == "eventlog"
    {
    	grok {
            patterns_dir => ["/etc/logstash/patterns/mellanox_grok.conf"]
            overwrite => ["message", "severity","timestamp"]
    		match => [ "message", "%{MELLANOXMSG}" ]
    	} #end grok

    	date {
    		match => ["timestamp", "YYYY-MM-dd HH:mm:ss.SSS"]
    		target => "timestamp"
    	}
    } #end mellanox_event_log
    
} #end syslog
else if [type] == "bmc_temp_sensor"
{
        grok {
                match => ["message","%{SENSORMSG}"]
		        patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
                add_tag => ["bmc_temp_sensor_grokked"]
        } #end grok

	date {
		match => ["bmc_temp_sensor_unix_time","UNIX"]
		target => "timestamp"
		add_tag => ["bmc_temp_sensor-timestamp-fixed"]
	} #end date

        if "_grokparsefailure" not in [tags] {
                mutate {
                        replace => [ "host", "bmc_temp_sensor", "path", "bmc_temp_sensor"]
                        add_tag => ["bmc_temp_sensor-final"]
                } #end mutate
        } #end host/pathG

} #end bmc_temp_sensor 
else if [type] == "ib_temp_sensor"
{
        grok {
                match => ["message","%{IBSENSORMSG}"]
		        patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
                add_tag => ["ib_temp_sensor_grokked"]
        } #end grok

        date {
                match => ["ib_temp_sensor_unix_time","UNIX"]
                target => "timestamp"
                add_tag => ["ib_temp_sensor-timestamp-fixed"]
        } #end date

        if "_grokparsefailure" not in [tags] {
                mutate {
                        replace => [ "host", "ib_temp_sensor", "path", "ib_temp_sensor"]
                        add_tag => ["ib_temp_sensor-final"]
                } #end mutate
        } #end host/path

} #end ib_temp_sensor
else if [type] == "bmc_sel"
{
        grok {
                match => ["message","%{BMC_SEL}"]
		        patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
                add_tag => ["bmc_sel_grokked"]
        } #end grok

        date {
                match => ["bmc_sel_unix_time","UNIX"]
                target => "timestamp"
                add_tag => ["bmc_sel-timestamp-fixed"]
        } #end dateG

        if "_grokparsefailure" not in [tags] {
                mutate {
                        replace => [ "host", "bmc_sel", "path", "bmc_sel"]
                        add_tag => ["bmc_sel-final"]
                } #end mutate
        } #end host/path

} #end bmc_sel
else if [type] == "zimon"
{
        grok {
                match => ["message","%{ZIMONMSG}"]
		        patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
                add_tag => ["zimon-grokked"]
        } #end grok

        date {
#               zimon date unix format
                match => ["zimon_unix_time","UNIX"]
                target => "timestamp"
                udd_tag => ["zimon-timestamp-fixed"]
        } #end date

        if "_grokparsefailure" not in [tags] {
                mutate {
                        replace => [ "host", "zimon", "path", "zimon"]
                        add_tag => ["zimon-final"]
                } #end mutate
        } #end host/path

} #end zimon
else if [type] == "gocons"
{
    json{
        source => "message"
        tag_on_failure => "json_parse_failure"
    }

	date {
		match => ["date","ISO8601"]
		target => "@timestamp"
	} #end date

    mutate {
        rename => { "node" => "hostname"}
        remove_field => ["date"]
    } 

}
#else
#{
#    mutate { 
#        add_tag => ["_grokparsefailure"]
#    }
#}

if "_grokparsefailure" not in [tags] {
    csm_event_correlator {
        events_dir => "/etc/logstash/patterns/events.yml" # The ras yaml pattern file.
        patterns_dir => "/etc/logstash/patterns/*.conf" # Patterns directory for grok patterns.
    }
}


} #end filters

output {
    elasticsearch {
        hosts => ['10.7.4.37:9200']
        index => "%{+YYYY.MM.dd}"
        http_compression =>true
    }


} #end outputs
