/*================================================================================

    csmi/include/csm_types/struct_defs/wm/csmi_node_resources_record.def

  Â© Copyright IBM Corporation 2015-2017. All Rights Reserved

    This program is licensed under the terms of the Eclipse Public License
    v1.0 as published by the Eclipse Foundation and available at
    http://www.eclipse.org/legal/epl-v10.html

    U.S. Government Users Restricted Rights:  Use, duplication or disclosure
    restricted by GSA ADP Schedule Contract with IBM Corp.

================================================================================*/

/**
 * CSMI_COMMENT
 * @brief Combines fields from the *csm_node* and *csm_ssd* tables to represent the resources of a node.
 */

#ifndef CSMI_STRUCT_NAME
    #define CSMI_STRUCT_NAME csmi_node_resources_record_t
    
    #undef CSMI_BASIC              
    #undef CSMI_STRING             
    #undef CSMI_STRING_FIXED       
    #undef CSMI_ARRAY              
    #undef CSMI_ARRAY_FIXED        
    #undef CSMI_ARRAY_STR          
    #undef CSMI_ARRAY_STR_FIXED    
    #undef CSMI_STRUCT             
    #undef CSMI_ARRAY_STRUCT       
    #undef CSMI_ARRAY_STRUCT_FIXED 
    #undef CSMI_NONE  
    
    #define CSMI_BASIC               1
    #define CSMI_STRING              1
    #define CSMI_STRING_FIXED        1
    #define CSMI_ARRAY               0
    #define CSMI_ARRAY_FIXED         0
    #define CSMI_ARRAY_STR           0
    #define CSMI_ARRAY_STR_FIXED     0
    #define CSMI_STRUCT              0
    #define CSMI_ARRAY_STRUCT        1
    #define CSMI_ARRAY_STRUCT_FIXED  0
    #define CSMI_NONE                0
#endif 


// CSMI_STRUCT_MEMBER(type, name, serial_type, length_member, init_value, extra ) /**< comment */
CSMI_VERSION_START(CSM_VERSION_0_4_1)

CSMI_STRUCT_MEMBER(int64_t                      , node_installed_memory    , BASIC       ,           , -1              ,                            ) /**< Amount of installed memory on this node (in kB). */
CSMI_STRUCT_MEMBER(int64_t                      , vg_available_size        , BASIC       ,           , -1              ,                            ) /**< Available size remaining (in bytes) in the volume group on this node. */
CSMI_STRUCT_MEMBER(int64_t                      , vg_total_size            , BASIC       ,           , -1              ,                            ) /**< Total size (in bytes) of the volume group on this node. */
CSMI_STRUCT_MEMBER(int32_t                      , node_available_cores     , BASIC       ,           , -1              ,                            ) /**< Deprecated after CSM_VERSION_0_4_1. Number of physical cores on this node from all processors. */
CSMI_STRUCT_MEMBER(int32_t                      , node_available_gpus      , BASIC       ,           , -1              ,                            ) /**< Deprecated after CSM_VERSION_0_4_1. Number of gpus available. */
CSMI_STRUCT_MEMBER(int32_t                      , node_available_processors, BASIC       ,           , -1              ,                            ) /**< Deprecated after CSM_VERSION_0_4_1. Number of processors on this node (processor sockets, non-uniform memory access (NUMA) nodes). */
CSMI_STRUCT_MEMBER(uint32_t                     , ssds_count               , BASIC       ,           , 0               ,                            ) /**< Number of elements in the ssds array. Size of @ref ssds. */
CSMI_STRUCT_MEMBER(csmi_node_type_t             , node_type                , BASIC       ,           , CSM_NODE_COMPUTE,                            ) /**< The type of the node, see @ref csmi_node_type_t for details. */
CSMI_STRUCT_MEMBER(csmi_node_state_t            , node_state               , BASIC       ,           , CSM_NODE_NO_DEF ,                            ) /**< State of the node, see @ref csmi_node_state_t for details. */
CSMI_STRUCT_MEMBER(csm_bool                     , node_ready               , BASIC       ,           , CSM_FALSE       ,                            ) /**< After CSM_VERSION_0_4_1, this field is populated indirectly via 'node_state'. - Flag indicating whether or not the node is ready ( @ref csm_bool). */
CSMI_STRUCT_MEMBER(char*                        , node_name                , STRING      ,           , NULL            ,                            ) /**< The name of the node described by this struct. */
CSMI_STRUCT_MEMBER(char*                        , node_update_time         , STRING      ,           , NULL            ,                            ) /**< The time the node information was last updated in the database. */
CSMI_STRUCT_MEMBER(char*                        , vg_update_time           , STRING      ,           , NULL            ,                            ) /**< Last time all the VG related information was updated. */
CSMI_STRUCT_MEMBER(csmi_ssd_resources_record_t**, ssds                     , ARRAY_STRUCT, ssds_count, NULL            , csmi_ssd_resources_record_t) /**< A list of ssd resources (for each ssd on this node) relevant to a job scheduler. Size defined in @ref ssds_count. */

CSMI_VERSION_END(13435de17fcaa6fd640e62b3283ccd4f)

CSMI_VERSION_START(CSM_VERSION_1_0_0)
CSMI_STRUCT_MEMBER(int32_t, node_discovered_cores  , BASIC , , -1  , ) /**< replacement for 'available_cores' after CSM_VERSION_0_4_1. Number of physical cores on this node from all processors. */
CSMI_STRUCT_MEMBER(int32_t, node_discovered_gpus   , BASIC , , -1  , ) /**< replacement for 'available_gpus' after CSM_VERSION_0_4_1. Number of gpus on node. */
CSMI_STRUCT_MEMBER(int32_t, node_discovered_sockets, BASIC , , -1  , ) /**< replacement for 'available_processors' after CSM_VERSION_0_4_1. Number of processors on the node.*/
CSMI_VERSION_END(9d808f4e2dfcec82345f07a82f048024)

#undef CSMI_VERSION_START
#undef CSMI_VERSION_END
#undef CSMI_STRUCT_MEMBER
