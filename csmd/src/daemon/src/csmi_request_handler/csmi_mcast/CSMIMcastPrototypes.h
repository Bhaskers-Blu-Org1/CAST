/*================================================================================

    csmd/src/daemon/src/csmi_request_handler/csmi_mcast/CSMIMcastPrototypes.h

  Â© Copyright IBM Corporation 2015-2017. All Rights Reserved

    This program is licensed under the terms of the Eclipse Public License
    v1.0 as published by the Eclipse Foundation and available at
    http://www.eclipse.org/legal/epl-v10.html

    U.S. Government Users Restricted Rights:  Use, duplication or disclosure
    restricted by GSA ADP Schedule Contract with IBM Corp.
 
================================================================================*/

/**
 * @file CSMIMcastPrototypes.h
 * A Collection of function prototypes for use in allocation multicasting.
 * @author John Dunham (jdunham@us.ibm)
 */

#ifndef CSMI_MCAST_PROTOTYPES
#define CSMI_MCAST_PROTOTYPES
#include "CSMIMcast.h"

/** @brief Defines a function that unpacks a database query to the properties.
 * 
 *  @tparam MProps The type of the multicast properties object, generally a template instantiation
 *      of CSMIMcast.
 *
 * @param[in] ctx A context object for associated with the database request.
 * @param[in] tuples A vector of database tuple values to process.
 * @param[out] mcastProps A Properties object to store the tuple content in.
 *
 * @return True If the payload was successfully parsed.
 */
template<class MProps>
using PayloadParser = bool(*)(
    csm::daemon::EventContextHandlerState_sptr& ctx,
    const std::vector<csm::db::DBTuple *>& tuples,
    MProps* mcastProps);

/** @brief Defines a function that generates a Database Query from a properties object.
 *  
 *  @tparam MProps The type of the multicast properties object, generally a template instantiation
 *      of CSMIMcast.
 *
 *  @param[in] ctx A context object for associated with the multicast. @todo Do we need this.
 *  @param[in] mcastProps A properties object to build a SQL Query from.
 *
 *  @return A database content object, nullptr if it fails to be created.
 */
template<class MProps>
using PayloadConstructor = csm::db::DBReqContent*(*)(
    csm::daemon::EventContextHandlerState_sptr& ctx,
    MProps* mcastProps);
    

/** @brief Defines a byte array creator for terminal states (e.g. early return from the multicast).
 *
 *  @param[out] buffer A buffer to contain the generated byte array.
 *  @param[out] bufferLength The length of @p buffer.
 *  @param[in]  ctx The context object to generate byte array from.
 *
 *  @return True if the byte array was created successfully.
 */
using TerminalByte = bool(*)(
    char** buffer, uint32_t& bufferLength,
    csm::daemon::EventContextHandlerState_sptr& ctx);

/**@brief Defines a multicast message parser for a responder object.
 * @param[in,out] mcastProps A multicast properties object to compare the payload against and 
 *                              update to reflect a successful multicast.
 * @param[in] content The payload being parsed.
 *
 * @return True if the payload was valid.
 */
template<class MProps>
using MCASTPayloadParser = bool(*)(
    MProps* mcastProps,
    const csm::network::MessageAndAddress content);

#endif
