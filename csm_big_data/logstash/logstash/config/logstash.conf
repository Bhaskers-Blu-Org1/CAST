input {

# syslog using SCALA DSV Content Pack
tcp {
	port => 10515
	type => "syslog"
} #end tcp
tcp {
        port => 10516
        type => "bmc_temp_sensor"
} 
tcp {
        port => 10517
        type => "ib_temp_sensor"
}
tcp {
        port => 10518
        type => "bmc_sel"
}
tcp {
        port => 10519
        type => "zimon"
}
} #end inputs


filter {

if [type] == "syslog" 
{
	grok {
		match => { "message" => "%{RSYSLOGDSV}" }
        overwrite => ["message"]
		patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
	} #end grok
	
	#force through date filter to drop microseconds and give us this timestamp yyyy-MM-dd'T'HH:mm:ss.SSSX
	date {
		match => ["SourceTimestamp","ISO8601"]
		target => "timestamp"
	} #end date

    if [syslogAppName] == "kernel"
    {
        # Attempt to derive the actual program name from the kernel message.
        grok { 
            match => {"message" => "%{KERNELMSG}" }
            overwrite => ["programName"]
            patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
            tag_on_failure => [ ]
        }
    }
    else if [syslogAppName] == "eventlog"
    {
    	grok {
            patterns_dir => ["/etc/logstash/patterns/mellanox_grok.conf"]
    		match => [ "message", "%{MELLANOXMSG}" ]
    	} #end grok
    
    	#grok_dynamic {
            #patterns_dir => ["/etc/logstash/patterns/mellanox_grok.conf"]
    	#	dynamic_patterns_dir => ["/etc/logstash/patterns/mellanox_grok.conf"]
    	#	data_field           => "event_description"
    	#	selector_field       => "event_id"
    	#}
    
    	date {
    		match => ["Origtimestamp", "YYYY-MM-dd HH:mm:ss.SSS"]
    		target => "timestamp"
    	}
    
    } #end mellanox_event_log
    else if [syslogAppName] == "mmfs" {
        grok {
		    patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
            match => [ "message", "%{MMFSMSG}" ]
        } #end grok
    } # end mmfs
    
    #if "_grokparsefailure" not in [tags] {
    #
    #    csm_ras {
    #        csm_target => ["localhost" ] # A list of aggregator daemon hostnames (multiple for failover if not using HAProxy)
    #        csm_port    => 4213   # The CSM REST port, this is the default value.
    #        csm_ras_yml => "/etc/logstash/conf.d/csm_ras.yml" # The ras yaml pattern file.
    #        
    #        event_type  => "syslog" # Explicitly set the type, this lets the registration bake in the pattern selection.
    #        event_data  => "message" # Sets the data field that will be parsed for RAS event generation.

     #       event_filter=> "syslogAppName"
     #   }

    #}
} #end syslog
else if [type] == "bmc_temp_sensor"
{
        grok {
                match => ["message","%{SENSORMSG}"]
		        patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
                add_tag => ["bmc_temp_sensor_grokked"]
        } #end grok

	date {
		match => ["bmc_temp_sensor_unix_time","UNIX"]
		target => "timestamp"
		add_tag => ["bmc_temp_sensor-timestamp-fixed"]
	} #end date

        if "_grokparsefailure" not in [tags] {
                mutate {
                        replace => [ "host", "bmc_temp_sensor", "path", "bmc_temp_sensor"]
                        add_tag => ["bmc_temp_sensor-final"]
                } #end mutate
        } #end host/pathG

} #end bmc_temp_sensor 
else if [type] == "ib_temp_sensor"
{
        grok {
                match => ["message","%{IBSENSORMSG}"]
		        patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
                add_tag => ["ib_temp_sensor_grokked"]
        } #end grok

        date {
                match => ["ib_temp_sensor_unix_time","UNIX"]
                target => "timestamp"
                add_tag => ["ib_temp_sensor-timestamp-fixed"]
        } #end date

        if "_grokparsefailure" not in [tags] {
                mutate {
                        replace => [ "host", "ib_temp_sensor", "path", "ib_temp_sensor"]
                        add_tag => ["ib_temp_sensor-final"]
                } #end mutate
        } #end host/path

} #end ib_temp_sensor
else if [type] == "bmc_sel"
{
        grok {
                match => ["message","%{BMC_SEL}"]
		        patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
                add_tag => ["bmc_sel_grokked"]
        } #end grok

        date {
                match => ["bmc_sel_unix_time","UNIX"]
                target => "timestamp"
                add_tag => ["bmc_sel-timestamp-fixed"]
        } #end dateG

        if "_grokparsefailure" not in [tags] {
                mutate {
                        replace => [ "host", "bmc_sel", "path", "bmc_sel"]
                        add_tag => ["bmc_sel-final"]
                } #end mutate
        } #end host/path

} #end bmc_sel
else if [type] == "zimon"
{
        grok {
                match => ["message","%{ZIMONMSG}"]
		        patterns_dir => ["/etc/logstash/patterns/ibm_grok.conf"]
                add_tag => ["zimon-grokked"]
        } #end grok

        date {
#               zimon date unix format
                match => ["zimon_unix_time","UNIX"]
                target => "timestamp"
                udd_tag => ["zimon-timestamp-fixed"]
        } #end date

        if "_grokparsefailure" not in [tags] {
                mutate {
                        replace => [ "host", "zimon", "path", "zimon"]
                        add_tag => ["zimon-final"]
                } #end mutate
        } #end host/path

} #end zimon
#else
#{
#    mutate { 
#        add_tag => ["_grokparsefailure"]
#    }
#}

if "_grokparsefailure" not in [tags] {
    csm_event_correlator {
        events_dir => "/etc/logstash/patterns/events.yml" # The ras yaml pattern file.
        patterns_dir => "/etc/logstash/patterns/*.conf" # Patterns directory for grok patterns.
    }
}


} #end filters

output {
    elasticsearch {
        hosts => ['10.7.4.37:9200']
        index => "%{+YYYY.MM.dd}"
        http_compression =>true
    }


} #end outputs
