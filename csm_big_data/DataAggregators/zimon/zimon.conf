input {

file {
	path => "/u/itoa/zimon/zimon_data_collection.log"
	start_position => "beginning"
#	sincedb_path => /dev/null
	type => "zimon"
} #end file

} #end inputs


filter {

##################################
#    Start zimon
##################################

if [type] == "zimon" {

	grok {
		match => { "message" => "%{ZIMONMSG}" }
		patterns_dir => ["/opt/logstash/patterns"]
		add_tag => ["zimon-grokked"]
	} #end grok
	
	date {
		match => ["unix_time","UNIX"]
		target => "@timestamp"
		add_tag => ["timestamp-fixed"]
	} #end date

	mutate {
		replace => [ "host", "zimon", "path", "zimon"]
		add_tag => ["zimon-final"]
	} #end mutate

} #end zimon

##################################
#     End zimon
##################################


} #end filters

output {
	stdout { codec => rubydebug }
	if "mellanox_event_log-final" in [tags] or "syslog-final" in [tags] or "zimon-final" in [tags] {
		scala { 
			scala_url => "https://10.2.5.1:9987/Unity/DataCollector"
			scala_user => "unityadmin" 
			scala_password => "unityadmin" 
			batch_size => 500000
			idle_flush_time => 5 
			sequential_flush => false
			num_concurrent_writers => 5
			use_structured_api => false
			disk_cache_path => "/opt/logstash/cache/IBM"

			scala_fields => {
				"mellanox_event_log@mellanox_event_log" => "@timestamp,log_counter,event_id,severity,event_type,category,event_description"
				"syslog@syslog" => "@timestamp,syslogHostname,syslogRelayHostname,tag,programName,processID,facility,syslogSeverity,syslogAppName,originalMessage"
				"zimon@zimon" => "@timestamp,cpu_system_compute_1,cpu_system_gpfs_1,cpu_system_gpfs_2,cpu_user_compute_1,cpu_user_gpfs_1,cpu_user_gpfs_2,mem_active_compute_1,mem_active_gpfs_1,mem_active_gpfs_2,gpfs_ns_bytes_read_compute_1,gpfs_ns_bytes_read_gpfs_1,gpfs_ns_bytes_read_gpfs_2,gpfs_ns_bytes_written_compute_1,gpfs_ns_bytes_written_gpfs_1,gpfs_ns_bytes_written_gpfs_2,gpfs_ns_tot_queue_wait_rd_compute_1,gpfs_ns_tot_queue_wait_rd_gpfs_1,gpfs_ns_tot_queue_wait_rd_gpfs_2"

			} #end scala_fields
			date_format_string => "yyyy-MM-dd'T'HH:mm:ss.SSSX"
		} #end scala output
	} #end output to LA


if "_grokparsefailure" in [tags] {
  file {
     codec => rubydebug
     path => "/opt/logstash/grok-debug.log"
    } #end file
} #end debug log


} #end outputs
